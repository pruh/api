name: test

on: 
  push:
    branches: [ "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '0 0 * * 0' # weekly

jobs:
  testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
          - '1.18'
        
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go }}

    - name: Verify dependencies
      run: go mod verify

    - name: setup env
      shell: bash
      run: |
        echo "{GOPATH}={$(go env GOPATH)}" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: go info
      shell: bash
      run: |          
        echo $(go version) at $(which go)
        echo go version: $(go version)
        echo go env: $(go env GOPATH) 
        echo cache: $(ls $RUNNER_TOOL_CACHE/go)
        echo GOPATH $GOPATH
        echo GITHUB_ENV $GITHUB_ENV
        echo GITHUB_PATH $GITHUB_PATH

    - name: Install dependencies
      shell: bash
      run: |
        go get golang.org/x/lint/golint
        go get github.com/fzipp/gocyclo

    - name: Run lint
      shell: bash
      run: |
        go env
        cp api.env.template api.env
        GO_FILES=$(find . -iname '*.go' -type f)
        echo 'fail if a .go file has not been formatted with gofmt'
        test -z $(gofmt -s -l $GO_FILES)
        echo 'go vet is the official Go static analyzer'
        go vet ./...
        echo 'one last linter'
        golint -set_exit_status $(go list ./...)
        echo 'Fail builds when the cyclomatic complexity reaches 15 or more'
        gocyclo -over 15 $GO_FILES

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
